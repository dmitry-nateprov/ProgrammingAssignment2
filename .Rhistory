makeCacheMatrix <- function(x = matrix()) {
inv <- NULL                                 #initializing inverse as Null
set <- function(y){
x <<- y
inv <- NULL
}
get <- function() {x}                       #get matrix x
set_inv <- function(inverse) {inv <<- inverse}
get_inv <- function {inv}
list(set = set, get = get, set_inv = set_inv, get_inv = get_inv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {                #gets cache data
inv <- x$get_inv()
if(!is.null(inv)){                          #checks inverse is Null or not
message("getting cashed data")
return(inv)                             #returns inverse value
}
mat <- x$get()
inv <- solve(mat, ...)                      #calculates inverse value
x$set_inv(inv)
inv                                         #returns inversed "x" matrix
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL                                 #initializing inverse as Null
set <- function(y){
x <<- y
inv <- NULL
}
get <- function() {x}                       #get matrix x
set_inv <- function(inverse) {inv <<- inverse}
get_inv <- function {inv}
list(set = set, get = get, set_inv = set_inv, get_inv = get_inv)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL                                 #initializing inverse as Null
set <- function(y){
x <<- y
inv <- NULL
}
get <- function() {x}                       #get matrix x
set_inv <- function(inverse) {inv <<- inverse}
get_inv <- function {inv}
list(set = set, get = get, set_inv = set_inv, get_inv = get_inv)
}
makeCacheMatrix <- function(x = matrix()){
inv <- NULL                                 #initializing inverse as Null
set <- function(y){
x <<- y
inv <- NULL
}
get <- function() {x}                       #get matrix x
set_inv <- function(inverse) {inv <<- inverse}
get_inv <- function() {inv}
list(set = set, get = get, set_inv = set_inv, get_inv = get_inv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {                #gets cache data
inv <- x$get_inv()
if(!is.null(inv)){                          #checks inverse is Null or not
message("getting cashed data")
return(inv)                             #returns inverse value
}
mat <- x$get()
inv <- solve(mat, ...)                      #calculates inverse value
x$set_inv(inv)
inv                                         #returns inversed "x" matrix
}
source("cachematrix.R")
source("cachematrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
pmatrix$get()
pmatrix$get_inv()
cacheSolve(pmatrix)
cacheSolve(pmatrix)
makeCacheMatrix <- function(x = matrix()){
inv <- NULL                                 #initializing inverse as Null
set <- function(y){
x <<- y
inv <- NULL
}
get <- function() x                         #get matrix x
set_inv <- function(inverse) inv <<- inverse
get_inv <- function() inv
list(set = set, get = get, set_inv = set_inv, get_inv = get_inv)
}
cacheSolve <- function(x, ...) {                #gets cache data
inv <- x$get_inv()
if(!is.null(inv)){                          #checks inverse is Null or not
message("getting cashed data")
return(inv)                             #returns inverse value
}
dat() <- x$get()
inv <- solve(dat, ...)                      #calculates inverse value
x$set_inv(inv)
inv                                         #returns inversed "x" matrix
}
makeCacheMatrix <- function(x = matrix()){
inv <- NULL                                 #initializing inverse as Null
set <- function(y){
x <<- y
inv <- NULL
}
get <- function() x                         #get matrix x
set_inv <- function(inverse) inv <<- inverse
get_inv <- function() inv
list(set = set, get = get, set_inv = set_inv, get_inv = get_inv)
}
## This is used to get the cache data
cacheSolve <- function(x, ...) {                #gets cache data
inv <- x$get_inv()
if(!is.null(inv)){                          #checks inverse is Null or not
message("getting cashed result")
return(inv)                             #returns inverse value
}
dat() <- x$get()
inv <- solve(dat, ...)                      #calculates inverse value
x$set_inv(inv)
inv                                         #returns inversed "x" matrix
}
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
cacheSolve <- function(x, ...) {                #gets cache data
inv <- x$get_inv()
if(!is.null(inv)){                          #checks inverse is Null or not
message("getting cashed result")
return(inv)                             #returns inverse value
}
data() <- x$get()
inv <- solve(data, ...)                      #calculates inverse value
x$set_inv(inv)
inv                                         #returns inversed "x" matrix
}
makeCacheMatrix <- function(x = matrix()){
inv <- NULL                                 #initializing inverse as Null
set <- function(y){
x <<- y
inv <- NULL
}
get <- function() x                         #get matrix x
set_inv <- function(inverse) inv <<- inverse
get_inv <- function() inv
list(set = set, get = get, set_inv = set_inv, get_inv = get_inv)
}
## This is used to get the cache data
cacheSolve <- function(x, ...) {                #gets cache data
inv <- x$get_inv()
if(!is.null(inv)){                          #checks inverse is Null or not
message("getting cashed result")
return(inv)                             #returns inverse value
}
data() <- x$get()
inv <- solve(data, ...)                      #calculates inverse value
x$set_inv(inv)
inv                                         #returns inversed "x" matrix
}
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
makeCacheMatrix <- function(x = matrix()){
inv <- NULL                                 #initializing inverse as Null
set <- function(y){
x <<- y
inv <- NULL
}
get <- function() x                         #get matrix x
set_inv <- function(inverse) inv <<- inverse
get_inv <- function() inv
list(set = set, get = get, set_inv = set_inv, get_inv = get_inv)
}
## This is used to get the cache data
cacheSolve <- function(x, ...) {                #gets cache data
inv <- x$get_inv()
if(!is.null(inv)){                          #checks inverse is Null or not
message("getting cashed result")
return(inv)                             #returns inverse value
}
data <- x$get()
inv <- solve(data, ...)                      #calculates inverse value
x$set_inv(inv)
inv                                         #returns inversed "x" matrix
}
makeCacheMatrix <- function(x = matrix()){
inv <- NULL                                 #initializing inverse as Null
set <- function(y){
x <<- y
inv <- NULL
}
get <- function() x                         #get matrix x
set_inv <- function(inverse) inv <<- inverse
get_inv <- function() inv
list(set = set, get = get, set_inv = set_inv, get_inv = get_inv)
}
## This is used to get the cache data
cacheSolve <- function(x, ...) {                #gets cache data
inv <- x$get_inv()
if(!is.null(inv)){                          #checks inverse is Null or not
message("getting cashed result")
return(inv)                             #returns inverse value
}
dat <- x$get()
inv <- solve(dat, ...)                      #calculates inverse value
x$set_inv(inv)
inv                                         #returns inversed "x" matrix
}
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
source("cachematrix.R")
> source("cachematrix.R")
> pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
> pmatrix$get()
[,1] [,2] [,3] [,4]
[1,]    1    5    9   13
[2,]    2    6   10   14
[3,]    3    7   11   15
[4,]    4    8   12   16
> pmatrix$get_inv()
NULL
> cacheSolve(pmatrix)
source("cachematrix.r")
source("cachematrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
pmatrix$get()
pmatrix$get_inv()
cacheSolve(pmatrix)
f <- makeCacheMatrix(matrix(1:8,2,4))
f$get()
f$get_inv()
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$get_inv()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$get_inv()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$get_inv()
cacheSolve(my_matrix)
